use eframe::egui;
use encript_tool::{
    config::{create_config_file, get_default_config_path, load_config, Config, OutputFormat},
    crypto::{decrypt_string, encrypt_string},
    file_ops::{
        decrypt_file_standard, decrypt_file_streaming, determine_output_path,
        encrypt_file_standard, encrypt_file_streaming,
    },
};
use std::path::PathBuf;

/// ÂÆüÁî®ÁöÑ„Å™GUIÊöóÂè∑Âåñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
pub struct CryptApp {
    // „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜÁî®
    input_text: String,
    text_password: String,
    output_text: String,
    text_password_visible: bool,
    text_use_env_password: bool,
    text_env_var_name: String,

    // „Éï„Ç°„Ç§„É´Âá¶ÁêÜÁî®
    selected_file_path: String,
    output_file_path: String,
    file_processing_mode: FileProcessingMode,
    use_streaming: bool,
    delete_original: bool,
    file_password: String,
    file_password_visible: bool,
    file_use_env_password: bool,
    file_env_var_name: String,

    // Ë®≠ÂÆöÈñ¢ÈÄ£
    config: Config,
    verbose: bool,

    // UIÁä∂ÊÖã
    error_message: String,
    success_message: String,
    fonts_loaded: bool,
    current_tab: Tab,

    // „Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÅÆÈÄ≤Êçó
    processing: bool,
}

#[derive(Clone, PartialEq)]
enum Tab {
    TextCrypto,
    FileCrypto,
    Settings,
    About,
}

#[derive(Clone, PartialEq)]
enum FileProcessingMode {
    Encrypt,
    Decrypt,
}

impl Default for CryptApp {
    fn default() -> Self {
        Self {
            // „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜÁî®
            input_text: String::new(),
            text_password: String::new(),
            output_text: String::new(),
            text_password_visible: false,
            text_use_env_password: false,
            text_env_var_name: "MYCRYPT_TEXT_PASSWORD".to_string(),

            // „Éï„Ç°„Ç§„É´Âá¶ÁêÜÁî®
            selected_file_path: String::new(),
            output_file_path: String::new(),
            file_processing_mode: FileProcessingMode::Encrypt,
            use_streaming: false,
            delete_original: false,
            file_password: String::new(),
            file_password_visible: false,
            file_use_env_password: false,
            file_env_var_name: "MYCRYPT_FILE_PASSWORD".to_string(),

            config: Config::default(),
            verbose: false,

            error_message: String::new(),
            success_message: String::new(),
            fonts_loaded: false,
            current_tab: Tab::TextCrypto,

            processing: false,
        }
    }
}

impl CryptApp {
    pub fn new(_cc: &eframe::CreationContext<'_>) -> Self {
        let mut app = Self::default();
        // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„ÇíË©¶Ë°å
        if let Ok(config) = load_config(None) {
            app.config = config;
        }
        app
    }

    /// „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜÁî®„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂèñÂæó
    fn get_text_password(&self) -> Result<String, String> {
        if self.text_use_env_password {
            std::env::var(&self.text_env_var_name)
                .map_err(|_| format!("Áí∞Â¢ÉÂ§âÊï∞ {} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì", self.text_env_var_name))
        } else if !self.text_password.is_empty() {
            Ok(self.text_password.clone())
        } else {
            Err("„Éë„Çπ„ÉØ„Éº„Éâ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì".to_string())
        }
    }

    /// „Éï„Ç°„Ç§„É´Âá¶ÁêÜÁî®„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂèñÂæó
    fn get_file_password(&self) -> Result<String, String> {
        if self.file_use_env_password {
            std::env::var(&self.file_env_var_name)
                .map_err(|_| format!("Áí∞Â¢ÉÂ§âÊï∞ {} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì", self.file_env_var_name))
        } else if !self.file_password.is_empty() {
            Ok(self.file_password.clone())
        } else {
            Err("„Éë„Çπ„ÉØ„Éº„Éâ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì".to_string())
        }
    }

    /// „ÉÜ„Ç≠„Çπ„ÉàÊöóÂè∑ÂåñÂá¶ÁêÜ
    fn encrypt_text(&mut self) -> Result<(), String> {
        if self.input_text.is_empty() {
            return Err("ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„Éà„ÅåÁ©∫„Åß„Åô".to_string());
        }

        let password = self.get_text_password()?;

        match encrypt_string(&self.input_text, &password, &self.config, self.verbose) {
            Ok(encrypted) => {
                self.output_text = encrypted;
                Ok(())
            }
            Err(e) => Err(format!("ÊöóÂè∑Âåñ„Ç®„É©„Éº: {e}")),
        }
    }

    /// „ÉÜ„Ç≠„Çπ„ÉàÂæ©Âè∑ÂåñÂá¶ÁêÜ
    fn decrypt_text(&mut self) -> Result<(), String> {
        if self.input_text.is_empty() {
            return Err("ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„Éà„ÅåÁ©∫„Åß„Åô".to_string());
        }

        let password = self.get_text_password()?;

        match decrypt_string(&self.input_text, &password, &self.config, self.verbose) {
            Ok(decrypted) => {
                self.output_text = decrypted;
                Ok(())
            }
            Err(e) => Err(format!("Âæ©Âè∑Âåñ„Ç®„É©„Éº: {e}")),
        }
    }

    /// „Éï„Ç°„Ç§„É´Âá¶ÁêÜÂÆüË°å
    fn process_file(&mut self) -> Result<(), String> {
        if self.selected_file_path.is_empty() {
            return Err("„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì".to_string());
        }

        let input_path = PathBuf::from(&self.selected_file_path);
        let password = self.get_file_password()?;

        // Âá∫Âäõ„Éë„Çπ„ÅÆÊ±∫ÂÆö
        let output_path = if self.output_file_path.is_empty() {
            determine_output_path(
                &input_path,
                &None,
                matches!(self.file_processing_mode, FileProcessingMode::Encrypt),
            )
            .map_err(|e| format!("Âá∫Âäõ„Éë„ÇπÊ±∫ÂÆö„Ç®„É©„Éº: {e}"))?
        } else {
            PathBuf::from(&self.output_file_path)
        };

        self.processing = true;

        let result = match self.file_processing_mode {
            FileProcessingMode::Encrypt => {
                if self.use_streaming {
                    encrypt_file_streaming(
                        &input_path,
                        &output_path,
                        &password,
                        &self.config,
                        self.verbose,
                    )
                } else {
                    encrypt_file_standard(
                        &input_path,
                        &output_path,
                        &password,
                        &self.config,
                        self.verbose,
                    )
                }
            }
            FileProcessingMode::Decrypt => {
                if self.use_streaming {
                    decrypt_file_streaming(
                        &input_path,
                        &output_path,
                        &password,
                        &self.config,
                        self.verbose,
                    )
                } else {
                    decrypt_file_standard(
                        &input_path,
                        &output_path,
                        &password,
                        &self.config,
                        self.verbose,
                    )
                }
            }
        };

        self.processing = false;

        match result {
            Ok(()) => {
                if self.delete_original {
                    if let Err(e) = std::fs::remove_file(&input_path) {
                        return Err(format!("ÂÖÉ„Éï„Ç°„Ç§„É´ÂâäÈô§„Ç®„É©„Éº: {e}"));
                    }
                }
                Ok(())
            }
            Err(e) => Err(format!("„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº: {e}")),
        }
    }

    /// Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò
    fn save_config(&mut self) -> Result<(), String> {
        let config_path =
            get_default_config_path().map_err(|e| format!("Ë®≠ÂÆö„Éë„ÇπÂèñÂæó„Ç®„É©„Éº: {e}"))?;

        create_config_file(&config_path).map_err(|e| format!("Ë®≠ÂÆö‰øùÂ≠ò„Ç®„É©„Éº: {e}"))?;

        Ok(())
    }

    /// „ÉÜ„Ç≠„Çπ„ÉàÊöóÂè∑Âåñ„Çø„Éñ„ÅÆÊèèÁîª
    fn draw_text_crypto_tab(&mut self, ui: &mut egui::Ui) {
        ui.heading("üìù „ÉÜ„Ç≠„Çπ„ÉàÊöóÂè∑Âåñ");
        ui.separator();

        // ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„Éà
        ui.label("ÂÖ•Âäõ„ÉÜ„Ç≠„Çπ„Éà:");
        ui.text_edit_multiline(&mut self.input_text);
        ui.add_space(10.0);

        // „Éë„Çπ„ÉØ„Éº„ÉâÂÖ•Âäõ
        ui.horizontal(|ui| {
            ui.label("„Éë„Çπ„ÉØ„Éº„Éâ:");
            if self.text_password_visible {
                ui.text_edit_singleline(&mut self.text_password);
            } else {
                ui.add(egui::TextEdit::singleline(&mut self.text_password).password(true));
            }
            if ui
                .button(if self.text_password_visible {
                    "üôà"
                } else {
                    "üëÅ"
                })
                .clicked()
            {
                self.text_password_visible = !self.text_password_visible;
            }
        });

        ui.checkbox(
            &mut self.text_use_env_password,
            "Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂèñÂæó",
        );
        if self.text_use_env_password {
            ui.horizontal(|ui| {
                ui.label("Áí∞Â¢ÉÂ§âÊï∞Âêç:");
                ui.text_edit_singleline(&mut self.text_env_var_name);
            });
        }

        ui.add_space(10.0);

        // Âá¶ÁêÜ„Éú„Çø„É≥
        ui.horizontal(|ui| {
            if ui.button("üîí ÊöóÂè∑Âåñ").clicked() {
                match self.encrypt_text() {
                    Ok(()) => {
                        self.error_message.clear();
                        self.success_message = "ÊöóÂè∑Âåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü".to_string();
                    }
                    Err(e) => {
                        self.error_message = e;
                        self.success_message.clear();
                    }
                }
            }

            if ui.button("üîì Âæ©Âè∑Âåñ").clicked() {
                match self.decrypt_text() {
                    Ok(()) => {
                        self.error_message.clear();
                        self.success_message = "Âæ©Âè∑Âåñ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü".to_string();
                    }
                    Err(e) => {
                        self.error_message = e;
                        self.success_message.clear();
                    }
                }
            }

            if ui.button("üóëÔ∏è „ÇØ„É™„Ç¢").clicked() {
                self.input_text.clear();
                self.output_text.clear();
                self.error_message.clear();
                self.success_message.clear();
            }

            if ui.button("üìã „Ç≥„Éî„Éº").clicked() {
                ui.ctx().copy_text(self.output_text.clone());
                self.success_message = "„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü".to_string();
            }
        });

        ui.add_space(10.0);

        // Ë©≥Á¥∞Âá∫Âäõ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ
        ui.checkbox(&mut self.verbose, "Ë©≥Á¥∞Âá∫Âäõ");

        ui.add_space(10.0);

        // Âá∫Âäõ„ÉÜ„Ç≠„Çπ„Éà
        ui.label("Âá∫Âäõ„ÉÜ„Ç≠„Çπ„Éà:");
        ui.text_edit_multiline(&mut self.output_text);
    }

    /// „Éï„Ç°„Ç§„É´ÊöóÂè∑Âåñ„Çø„Éñ„ÅÆÊèèÁîª
    fn draw_file_crypto_tab(&mut self, ui: &mut egui::Ui) {
        ui.heading("üìÅ „Éï„Ç°„Ç§„É´ÊöóÂè∑Âåñ");
        ui.separator();

        // „Éï„Ç°„Ç§„É´ÈÅ∏Êäû
        ui.horizontal(|ui| {
            ui.label("„Éï„Ç°„Ç§„É´„Éë„Çπ:");
            ui.text_edit_singleline(&mut self.selected_file_path);
        });

        ui.add_space(10.0);

        // Âá¶ÁêÜ„É¢„Éº„ÉâÈÅ∏Êäû
        ui.horizontal(|ui| {
            ui.label("Âá¶ÁêÜ„É¢„Éº„Éâ:");
            ui.radio_value(
                &mut self.file_processing_mode,
                FileProcessingMode::Encrypt,
                "ÊöóÂè∑Âåñ",
            );
            ui.radio_value(
                &mut self.file_processing_mode,
                FileProcessingMode::Decrypt,
                "Âæ©Âè∑Âåñ",
            );
        });

        // Âá∫Âäõ„Éï„Ç°„Ç§„É´„Éë„Çπ
        ui.horizontal(|ui| {
            ui.label("Âá∫Âäõ„Éï„Ç°„Ç§„É´:");
            ui.text_edit_singleline(&mut self.output_file_path);
            if ui.button("Ëá™Âãï").clicked() {
                self.output_file_path.clear();
            }
        });

        ui.add_space(10.0);

        // „Éï„Ç°„Ç§„É´Áî®„Éë„Çπ„ÉØ„Éº„ÉâÂÖ•Âäõ
        ui.horizontal(|ui| {
            ui.label("„Éï„Ç°„Ç§„É´„Éë„Çπ„ÉØ„Éº„Éâ:");
            if self.file_password_visible {
                ui.text_edit_singleline(&mut self.file_password);
            } else {
                ui.add(egui::TextEdit::singleline(&mut self.file_password).password(true));
            }
            if ui
                .button(if self.file_password_visible {
                    "üôà"
                } else {
                    "üëÅ"
                })
                .clicked()
            {
                self.file_password_visible = !self.file_password_visible;
            }
        });

        ui.checkbox(
            &mut self.file_use_env_password,
            "Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂèñÂæó",
        );
        if self.file_use_env_password {
            ui.horizontal(|ui| {
                ui.label("Áí∞Â¢ÉÂ§âÊï∞Âêç:");
                ui.text_edit_singleline(&mut self.file_env_var_name);
            });
        }

        ui.add_space(10.0);

        // „Ç™„Éó„Ç∑„Éß„É≥
        ui.checkbox(
            &mut self.use_streaming,
            "„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞Âá¶ÁêÜÔºàÂ§ßÂÆπÈáè„Éï„Ç°„Ç§„É´Áî®Ôºâ",
        );
        ui.checkbox(&mut self.delete_original, "Âá¶ÁêÜÂæå„Å´ÂÖÉ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§");
        ui.checkbox(&mut self.verbose, "Ë©≥Á¥∞Âá∫Âäõ");

        ui.add_space(10.0);

        // Âá¶ÁêÜÂÆüË°å
        if !self.processing {
            if ui.button("üöÄ „Éï„Ç°„Ç§„É´Âá¶ÁêÜÂÆüË°å").clicked() {
                match self.process_file() {
                    Ok(()) => {
                        self.error_message.clear();
                        self.success_message = "„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü".to_string();
                    }
                    Err(e) => {
                        self.error_message = e;
                        self.success_message.clear();
                    }
                }
            }
        } else {
            ui.horizontal(|ui| {
                ui.spinner();
                ui.label("Âá¶ÁêÜ‰∏≠...");
            });
        }
    }

    /// Ë®≠ÂÆö„Çø„Éñ„ÅÆÊèèÁîª
    fn draw_settings_tab(&mut self, ui: &mut egui::Ui) {
        ui.heading("‚öôÔ∏è Ë®≠ÂÆö");
        ui.separator();

        // Argon2Ë®≠ÂÆö
        ui.collapsing("üîß Argon2 „Éë„É©„É°„Éº„Çø", |ui| {
            ui.horizontal(|ui| {
                ui.label("„É°„É¢„É™‰ΩøÁî®Èáè (KB):");
                ui.add(
                    egui::DragValue::new(&mut self.config.argon2.memory_cost).range(1024..=1048576),
                );
            });

            ui.horizontal(|ui| {
                ui.label("ÊôÇÈñì„Ç≥„Çπ„Éà:");
                ui.add(egui::DragValue::new(&mut self.config.argon2.time_cost).range(1..=10));
            });

            ui.horizontal(|ui| {
                ui.label("‰∏¶ÂàóÂ∫¶:");
                ui.add(egui::DragValue::new(&mut self.config.argon2.parallelism).range(1..=16));
            });
        });

        ui.add_space(10.0);

        // Âá∫ÂäõÂΩ¢Âºè
        ui.horizontal(|ui| {
            ui.label("Âá∫ÂäõÂΩ¢Âºè:");
            ui.radio_value(
                &mut self.config.default_format,
                OutputFormat::Base64,
                "Base64",
            );
            ui.radio_value(&mut self.config.default_format, OutputFormat::Hex, "Hex");
        });

        ui.add_space(10.0);

        // „Åù„ÅÆ‰ªñ„ÅÆË®≠ÂÆö
        ui.checkbox(&mut self.config.default_verbose, "„Éá„Éï„Ç©„É´„Éà„ÅßË©≥Á¥∞Âá∫Âäõ");

        ui.add_space(20.0);

        // „Éë„Çπ„ÉØ„Éº„ÉâÂêåÊúüÊ©üËÉΩ
        ui.collapsing("üîë „Éë„Çπ„ÉØ„Éº„ÉâÁÆ°ÁêÜ", |ui| {
            ui.label("‰æøÂà©Ê©üËÉΩ:");
            ui.horizontal(|ui| {
                if ui.button("„ÉÜ„Ç≠„Çπ„Éà‚Üí„Éï„Ç°„Ç§„É´").clicked() {
                    self.file_password = self.text_password.clone();
                    self.success_message =
                        "„ÉÜ„Ç≠„Çπ„Éà„Éë„Çπ„ÉØ„Éº„Éâ„Çí„Éï„Ç°„Ç§„É´„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü".to_string();
                }
                if ui.button("„Éï„Ç°„Ç§„É´‚Üí„ÉÜ„Ç≠„Çπ„Éà").clicked() {
                    self.text_password = self.file_password.clone();
                    self.success_message =
                        "„Éï„Ç°„Ç§„É´„Éë„Çπ„ÉØ„Éº„Éâ„Çí„ÉÜ„Ç≠„Çπ„Éà„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü".to_string();
                }
                if ui.button("‰∏°Êñπ„ÇØ„É™„Ç¢").clicked() {
                    self.text_password.clear();
                    self.file_password.clear();
                    self.success_message = "„Éë„Çπ„ÉØ„Éº„Éâ„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü".to_string();
                }
            });
        });

        ui.add_space(10.0);

        // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Êìç‰Ωú
        ui.collapsing("üíæ Ë®≠ÂÆö„Éï„Ç°„Ç§„É´", |ui| {
            if let Ok(config_path) = get_default_config_path() {
                ui.label(format!("Ë®≠ÂÆö„Éï„Ç°„Ç§„É´: {}", config_path.display()));
                ui.label(format!(
                    "Â≠òÂú®: {}",
                    if config_path.exists() {
                        "„ÅØ„ÅÑ"
                    } else {
                        "„ÅÑ„ÅÑ„Åà"
                    }
                ));

                ui.horizontal(|ui| {
                    if ui.button("üíæ Ë®≠ÂÆö‰øùÂ≠ò").clicked() {
                        match self.save_config() {
                            Ok(()) => {
                                self.error_message.clear();
                                self.success_message = "Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü".to_string();
                            }
                            Err(e) => {
                                self.error_message = e;
                                self.success_message.clear();
                            }
                        }
                    }

                    if ui.button("üìÇ Ë®≠ÂÆöË™≠Ëæº").clicked() {
                        match load_config(None) {
                            Ok(config) => {
                                self.config = config;
                                self.error_message.clear();
                                self.success_message = "Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü".to_string();
                            }
                            Err(e) => {
                                self.error_message = format!("Ë®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}");
                                self.success_message.clear();
                            }
                        }
                    }

                    if ui.button("üîÑ „Éá„Éï„Ç©„É´„Éà„Å´„É™„Çª„ÉÉ„Éà").clicked() {
                        self.config = Config::default();
                        self.success_message = "Ë®≠ÂÆö„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åó„Åü".to_string();
                    }
                });
            } else {
                ui.label("Ë®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
            }
        });
    }

    /// About„Çø„Éñ„ÅÆÊèèÁîª
    fn draw_about_tab(&mut self, ui: &mut egui::Ui) {
        ui.heading("‚ÑπÔ∏è „Åì„ÅÆ„Ç¢„Éó„É™„Å´„Å§„ÅÑ„Å¶");
        ui.separator();

        ui.label("AES-GCM ÊöóÂè∑Âåñ„ÉÑ„Éº„É´ GUI");
        ui.label("„Éê„Éº„Ç∏„Éß„É≥: 2.0");
        ui.add_space(10.0);

        ui.label("üîê Ê©üËÉΩ:");
        ui.label("‚Ä¢ „ÉÜ„Ç≠„Çπ„Éà„ÅÆÊöóÂè∑Âåñ„ÉªÂæ©Âè∑Âåñ");
        ui.label("‚Ä¢ „Éï„Ç°„Ç§„É´„ÅÆÊöóÂè∑Âåñ„ÉªÂæ©Âè∑Âåñ");
        ui.label("‚Ä¢ Áã¨Á´ã„Åó„Åü„Éë„Çπ„ÉØ„Éº„ÉâÁÆ°ÁêÜ");
        ui.label("‚Ä¢ Argon2„Ç≠„ÉºÂ∞éÂá∫");
        ui.label("‚Ä¢ „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞Âá¶ÁêÜ");
        ui.label("‚Ä¢ Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò„ÉªË™≠Ëæº");

        ui.add_space(10.0);

        ui.label("üõ°Ô∏è „Çª„Ç≠„É•„É™„ÉÜ„Ç£:");
        ui.label("‚Ä¢ AES-256-GCMÊöóÂè∑Âåñ");
        ui.label("‚Ä¢ Argon2id„Ç≠„ÉºÂ∞éÂá∫");
        ui.label("‚Ä¢ ÂÆâÂÖ®„Å™„É©„É≥„ÉÄ„É†„Éä„É≥„ÇπÁîüÊàê");

        ui.add_space(10.0);

        ui.label("üéõÔ∏è ‰Ωø„ÅÑÊñπ:");
        ui.label("1. „ÉÜ„Ç≠„Çπ„Éà„Çø„Éñ„Åß„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊöóÂè∑Âåñ„ÉªÂæ©Âè∑Âåñ");
        ui.label("2. „Éï„Ç°„Ç§„É´„Çø„Éñ„Åß„Éï„Ç°„Ç§„É´„ÅÆÂá¶ÁêÜÔºàÁã¨Á´ã„Éë„Çπ„ÉØ„Éº„ÉâÔºâ");
        ui.label("3. Ë®≠ÂÆö„Çø„Éñ„Åß„Éë„É©„É°„Éº„ÇøË™øÊï¥„Å®„Éë„Çπ„ÉØ„Éº„ÉâÁÆ°ÁêÜ");
        ui.label("4. Áí∞Â¢ÉÂ§âÊï∞„Åß„Éë„Çπ„ÉØ„Éº„ÉâË®≠ÂÆöÂèØËÉΩ");
        ui.label("   - MYCRYPT_TEXT_PASSWORDÔºà„ÉÜ„Ç≠„Çπ„ÉàÁî®Ôºâ");
        ui.label("   - MYCRYPT_FILE_PASSWORDÔºà„Éï„Ç°„Ç§„É´Áî®Ôºâ");
    }
}

impl eframe::App for CryptApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // Êó•Êú¨Ë™û„Éï„Ç©„É≥„ÉàË®≠ÂÆö
        if !self.fonts_loaded {
            let mut fonts = egui::FontDefinitions::default();

            if let Ok(font_data) =
                std::fs::read("/usr/share/fonts/vl-gothic-fonts/VL-Gothic-Regular.ttf")
            {
                fonts.font_data.insert(
                    "vl_gothic".to_owned(),
                    egui::FontData::from_owned(font_data).into(),
                );

                fonts
                    .families
                    .get_mut(&egui::FontFamily::Proportional)
                    .unwrap()
                    .insert(0, "vl_gothic".to_owned());

                ctx.set_fonts(fonts);
            }

            self.fonts_loaded = true;
        }

        // „Éà„ÉÉ„Éó„É°„Éã„É•„Éº„Éê„Éº
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            egui::MenuBar::new().ui(ui, |ui| {
                ui.menu_button("„Éï„Ç°„Ç§„É´", |ui| {
                    if ui.button("Êñ∞Ë¶è").clicked() {
                        self.input_text.clear();
                        self.output_text.clear();
                        self.text_password.clear();
                        self.file_password.clear();
                        self.selected_file_path.clear();
                        self.output_file_path.clear();
                        self.error_message.clear();
                        self.success_message.clear();
                    }
                    if ui.button("Ë®≠ÂÆöË™≠Ëæº").clicked() {
                        match load_config(None) {
                            Ok(config) => {
                                self.config = config;
                                self.success_message = "Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü".to_string();
                            }
                            Err(e) => {
                                self.error_message = format!("Ë®≠ÂÆöË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}");
                            }
                        }
                    }
                    if ui.button("Ë®≠ÂÆö‰øùÂ≠ò").clicked() {
                        match self.save_config() {
                            Ok(()) => self.success_message = "Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü".to_string(),
                            Err(e) => self.error_message = e,
                        }
                    }
                    ui.separator();
                    if ui.button("ÁµÇ‰∫Ü").clicked() {
                        ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                    }
                });

                ui.menu_button("„Éò„É´„Éó", |ui| {
                    if ui.button("„Åì„ÅÆ„Ç¢„Éó„É™„Å´„Å§„ÅÑ„Å¶").clicked() {
                        self.current_tab = Tab::About;
                    }
                });
            });
        });

        // „Çø„Éñ„Éê„Éº
        egui::TopBottomPanel::top("tab_panel").show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.selectable_value(&mut self.current_tab, Tab::TextCrypto, "üìù „ÉÜ„Ç≠„Çπ„Éà");
                ui.selectable_value(&mut self.current_tab, Tab::FileCrypto, "üìÅ „Éï„Ç°„Ç§„É´");
                ui.selectable_value(&mut self.current_tab, Tab::Settings, "‚öôÔ∏è Ë®≠ÂÆö");
                ui.selectable_value(&mut self.current_tab, Tab::About, "‚ÑπÔ∏è ÊÉÖÂ†±");
            });
        });

        // „Çπ„ÉÜ„Éº„Çø„Çπ„Éê„Éº
        egui::TopBottomPanel::bottom("status_panel").show(ctx, |ui| {
            ui.horizontal(|ui| {
                if !self.error_message.is_empty() {
                    ui.colored_label(egui::Color32::RED, format!("‚ùå {}", self.error_message));
                } else if !self.success_message.is_empty() {
                    ui.colored_label(egui::Color32::GREEN, format!("‚úÖ {}", self.success_message));
                } else {
                    ui.label("Ê∫ñÂÇôÂÆå‰∫Ü");
                }

                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                    if self.processing {
                        ui.spinner();
                    }
                });
            });
        });

        // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ
        egui::CentralPanel::default().show(ctx, |ui| match self.current_tab {
            Tab::TextCrypto => self.draw_text_crypto_tab(ui),
            Tab::FileCrypto => self.draw_file_crypto_tab(ui),
            Tab::Settings => self.draw_settings_tab(ui),
            Tab::About => self.draw_about_tab(ui),
        });
    }
}

fn main() -> eframe::Result<()> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default()
            .with_inner_size([800.0, 600.0])
            .with_min_inner_size([600.0, 400.0])
            .with_title("AES-GCM ÊöóÂè∑Âåñ„ÉÑ„Éº„É´"),
        ..Default::default()
    };

    eframe::run_native(
        "AES-GCM Encryption Tool",
        options,
        Box::new(|cc| Ok(Box::new(CryptApp::new(cc)))),
    )
}
